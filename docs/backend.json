{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the GitHub Agent application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "username": {
          "type": "string",
          "description": "The user's username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "githubAccessToken": {
          "type": "string",
          "description": "The user's GitHub access token for API authentication.  Important: Treat securely."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "githubAccessToken"
      ]
    },
    "Prompt": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Prompt",
      "type": "object",
      "description": "Represents a user prompt submitted to the GitHub Agent.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the prompt."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Prompt).  The user who submitted the prompt."
        },
        "promptText": {
          "type": "string",
          "description": "The text of the user's prompt."
        },
        "timestamp": {
          "type": "string",
          "description": "The date and time the prompt was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "promptText",
        "timestamp"
      ]
    },
    "Command": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Command",
      "type": "object",
      "description": "Represents a Git command generated by the GitHub Agent in response to a prompt.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the command."
        },
        "promptId": {
          "type": "string",
          "description": "Reference to Prompt. (Relationship: Prompt 1:N Command). The prompt that triggered this command."
        },
        "commandText": {
          "type": "string",
          "description": "The actual Git command text."
        },
        "explanation": {
          "type": "string",
          "description": "Explanation of what the command does."
        },
        "executionStatus": {
          "type": "string",
          "description": "The execution status of the generated command, for example: Pending, Succeeded, Failed."
        }
      },
      "required": [
        "id",
        "promptId",
        "commandText",
        "explanation"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Access is restricted to the user themselves.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/prompts/{promptId}",
        "definition": {
          "entityName": "Prompt",
          "schema": {
            "$ref": "#/backend/entities/Prompt"
          },
          "description": "Stores prompts submitted by a specific user. Enforces path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "promptId",
              "description": "The unique identifier of the prompt."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/prompts/{promptId}/commands/{commandId}",
        "definition": {
          "entityName": "Command",
          "schema": {
            "$ref": "#/backend/entities/Command"
          },
          "description": "Stores commands generated in response to a user's prompt. Continues the hierarchical path structure.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "promptId",
              "description": "The unique identifier of the prompt."
            },
            {
              "name": "commandId",
              "description": "The unique identifier of the command."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability for the GitHub Agent application.  It follows the principle of path-based ownership for user-specific data. Authorization Independence is achieved by avoiding `get()` calls in security rules. The QAP (Rules are not Filters) is supported via structural segregation, ensuring each collection has a homogeneous security posture.\n\nSpecifically:\n\n*   `/users/{userId}`: Stores user profiles.  Access is restricted to the user themselves. This segregation supports QAPs because listing users is not supported; access is only granted to a specific user.\n*   `/users/{userId}/prompts/{promptId}`: Stores prompts submitted by a specific user. This follows path-based ownership, simplifying security rules.\n*   `/users/{userId}/prompts/{promptId}/commands/{commandId}`: Stores commands generated in response to a user's prompt. This continues the hierarchical path structure for nested data, maintaining clear ownership and simplifying security rules."
  }
}